{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","href","target","rel","Boolean","window","location","hostname","match","obj","store","createStore","data","name","age","mutations","changeName","changeAge","state","action","RegExp","test","type","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAuBeA,G,MApBH,WACX,OACC,yBAAKC,UAAU,OACd,4BAAQA,UAAU,cACjB,mCACM,4CADN,wBAGA,uBACCA,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJL,mBCEgBC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCXH,IAAmBC,EAefC,EAAQC,aAfOF,EAgBd,CAEHG,KAAM,CACLC,KAAM,MACNC,IAAK,IAGNC,UAAW,CACVC,WADU,WAET,MAAO,CACNH,KAAM,QAGRI,UANU,WAOT,MAAO,CACNH,IAAK,kBA9BF,SAASI,EAAOC,GAItB,OADUC,OAAO,gBACTC,KAAKF,EAAOG,MAEZb,EAAIG,KAGJW,OAAOC,OAAO,GAAIN,EAAOT,EAAIM,UAAUI,EAAOG,MAAMJ,OA2B9DO,IAASC,OACR,kBAAC,IAAD,CAAUhB,MAAOA,GAChB,kBAAC,EAAD,OAEDiB,SAASC,eAAe,SDkFpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAClCA,EAAaC,iB","file":"static/js/main.156a7f61.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<p>\n\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\n\t\t\t\t</p>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tLearn React\n\t\t\t\t</a>\n\t\t\t</header>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//封装函数\nvar fun = function(obj) {\n\treturn function(state, action) {\n\t\t//@@redux/INIT默认状态下的action.type,它加的有随机参数。\n\t\t//自定义的action.type不要包含@@redux/INIT，否组会影响结果。\n\t\tvar reg = RegExp(\"@@redux/INIT\");\n\t\tif (reg.test(action.type)) {\n\t\t\t//此处的返回值是第一次执行时的返回值，返回了data的对象\n\t\t\treturn obj.data;\n\t\t} else {\n\t\t\t//Object.assign返回合并数组，并返回新数组，被重新赋值给state仓库。\n\t\t\treturn Object.assign({}, state, obj.mutations[action.type](state));\n\t\t}\n\t};\n};\n//createStore是函数执行一次，返回值就是state\nlet store = createStore(\n\tfun({\n\t\t//data是初始state仓库的值；\n\t\tdata: {\n\t\t\tname: \"jos\",\n\t\t\tage: 20\n\t\t},\n\t\t//mutations是定义的可以改变state里面的值的方法\n\t\tmutations: {\n\t\t\tchangeName() {\n\t\t\t\treturn {\n\t\t\t\t\tname: \"son\"\n\t\t\t\t};\n\t\t\t},\n\t\t\tchangeAge() {\n\t\t\t\treturn {\n\t\t\t\t\tage: \"state.age+1\"\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t})\n);\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}